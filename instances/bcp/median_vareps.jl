using JuMP

m = Model()

# ----- Variables ----- #
x_Idx = Any[1, 2, 3]
@variable(m, x[x_Idx])
setlowerbound(x[1], 1.0e-8)


# ----- Constraints ----- #
@NLconstraint(m, e1, -(sqrt( (x[1])^2+ ((-0.171747132)+x[2])^2)+sqrt( (x[1])^2+ ((-0.843266708)+x[2])^2)+sqrt( (x[1])^2+ ((-0.550375356)+x[2])^2)+sqrt( (x[1])^2+ ((-0.301137904)+x[2])^2)+sqrt( (x[1])^2+ ((-0.292212117)+x[2])^2)+sqrt( (x[1])^2+ ((-0.224052867)+x[2])^2)+sqrt( (x[1])^2+ ((-0.349830504)+x[2])^2)+sqrt( (x[1])^2+ ((-0.856270347)+x[2])^2)+sqrt( (x[1])^2+ ((-0.067113723)+x[2])^2)+sqrt( (x[1])^2+ ((-0.500210669)+x[2])^2)+sqrt( (x[1])^2+ ((-0.998117627)+x[2])^2)+sqrt( (x[1])^2+ ((-0.578733378)+x[2])^2)+sqrt( (x[1])^2+ ((-0.991133039)+x[2])^2)+sqrt( (x[1])^2+ ((-0.762250467)+x[2])^2)+sqrt( (x[1])^2+ ((-0.130692483)+x[2])^2)+sqrt( (x[1])^2+ ((-0.639718759)+x[2])^2)+sqrt( (x[1])^2+ ((-0.159517864)+x[2])^2)+sqrt( (x[1])^2+ ((-0.250080533)+x[2])^2)+sqrt( (x[1])^2+ ((-0.668928609)+x[2])^2)+x[1])+x[3] == 0.0)


# ----- Objective ----- #
@objective(m, Min, x[3])
m = m 		 # model get returned when including this script. 

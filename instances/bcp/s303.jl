using JuMP

m = Model()

# ----- Variables ----- #
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
@variable(m, x[x_Idx])


# ----- Constraints ----- #
@NLconstraint(m, e1, -( (x[1])^2+ (x[2])^2+ (x[3])^2+ (x[4])^2+ (x[5])^2+ (x[6])^2+ (x[7])^2+ (x[8])^2+ (x[9])^2+ (x[10])^2+ (x[11])^2+ (x[12])^2+ (x[13])^2+ (x[14])^2+ (x[15])^2+ (x[16])^2+ (x[17])^2+ (x[18])^2+ (x[19])^2+ (x[20])^2+ (0.5*x[1]+x[2]+1.5*x[3]+2*x[4]+2.5*x[5]+3*x[6]+3.5*x[7]+4*x[8]+4.5*x[9]+5*x[10]+5.5*x[11]+6*x[12]+6.5*x[13]+7*x[14]+7.5*x[15]+8*x[16]+8.5*x[17]+9*x[18]+9.5*x[19]+10*x[20])^2+ (0.5*x[1]+x[2]+1.5*x[3]+2*x[4]+2.5*x[5]+3*x[6]+3.5*x[7]+4*x[8]+4.5*x[9]+5*x[10]+5.5*x[11]+6*x[12]+6.5*x[13]+7*x[14]+7.5*x[15]+8*x[16]+8.5*x[17]+9*x[18]+9.5*x[19]+10*x[20])^4)+x[21] == 0.0)


# ----- Objective ----- #
@objective(m, Min, x[21])
m = m 		 # model get returned when including this script. 

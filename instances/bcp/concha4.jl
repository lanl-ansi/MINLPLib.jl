using JuMP

m = Model()

# ----- Variables ----- #
x_Idx = Any[1, 2, 3]
@variable(m, x[x_Idx])
setlowerbound(x[2], 0.0)
setlowerbound(x[1], -10.0)
setupperbound(x[1], -0.0001)
setupperbound(x[2], 10.0)


# ----- Constraints ----- #
@NLconstraint(m, e1, -( (1-1/(x[1]+x[2]))^2+ (1-1/(x[1]+x[2]))^2+ (3-2/(2*x[1]+x[2]))^2+ (4-3/(3*x[1]+x[2]))^2+ (7-4/(4*x[1]+x[2]))^2+ (11-5/(5*x[1]+x[2]))^2+ (18-6/(6*x[1]+x[2]))^2+ (29-7/(7*x[1]+x[2]))^2+ (47-8/(8*x[1]+x[2]))^2+ (76-9/(9*x[1]+x[2]))^2+ (123-10/(10*x[1]+x[2]))^2+ (199-11/(11*x[1]+x[2]))^2+ (322-12/(12*x[1]+x[2]))^2+ (521-13/(13*x[1]+x[2]))^2+ (843-14/(14*x[1]+x[2]))^2+ (1364-15/(15*x[1]+x[2]))^2+ (2207-16/(16*x[1]+x[2]))^2+ (3571-17/(17*x[1]+x[2]))^2+ (5778-18/(18*x[1]+x[2]))^2+ (9529-19/(19*x[1]+x[2]))^2+ (15307-20/(20*x[1]+x[2]))^2+ (24836-21/(21*x[1]+x[2]))^2)+x[3] == 0.0)


# ----- Objective ----- #
@objective(m, Min, x[3])
m = m 		 # model get returned when including this script. 

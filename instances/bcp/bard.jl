using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3]
@variable(m, x[x_Idx])


# ----- Constraints ----- #
@NLconstraint(m, e1, -( (0.14-1/(15*x[2]+x[3])-x[1])^2+ (0.18-2/(14*x[2]+2*x[3])-x[1])^2+ (0.22-3/(13*x[2]+3*x[3])-x[1])^2+ (0.25-4/(12*x[2]+4*x[3])-x[1])^2+ (0.29-5/(11*x[2]+5*x[3])-x[1])^2+ (0.32-6/(10*x[2]+6*x[3])-x[1])^2+ (0.35-7/(9*x[2]+7*x[3])-x[1])^2+ (0.39-8/(8*x[2]+8*x[3])-x[1])^2+ (0.37-9/(7*x[2]+7*x[3])-x[1])^2+ (0.58-10/(6*x[2]+6*x[3])-x[1])^2+ (0.73-11/(5*x[2]+5*x[3])-x[1])^2+ (0.96-12/(4*x[2]+4*x[3])-x[1])^2+ (1.34-13/(3*x[2]+3*x[3])-x[1])^2+ (2.1-14/(2*x[2]+2*x[3])-x[1])^2+ (4.39-15/(x[2]+x[3])-x[1])^2)+objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)
m = m 		 # model get returned when including this script. 

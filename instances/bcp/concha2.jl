using JuMP

m = Model()

# ----- Variables ----- #
x_Idx = Any[1, 2, 3]
@variable(m, x[x_Idx])
setupperbound(x[2], 0.0)
setlowerbound(x[1], 0.001)
setupperbound(x[1], 10.0)
setlowerbound(x[2], -1.0)


# ----- Constraints ----- #
@NLconstraint(m, e1, -( (1-1/(x[1]+x[2]))^2+ (1-1/(x[1]+x[2]))^2+ (3-1/(x[1]+2*x[2]))^2+ (4-1/(x[1]+3*x[2]))^2+ (7-1/(x[1]+4*x[2]))^2+ (11-1/(x[1]+5*x[2]))^2+ (18-1/(x[1]+6*x[2]))^2+ (29-1/(x[1]+7*x[2]))^2+ (47-1/(x[1]+8*x[2]))^2+ (76-1/(x[1]+9*x[2]))^2+ (123-1/(x[1]+10*x[2]))^2+ (199-1/(x[1]+11*x[2]))^2+ (322-1/(x[1]+12*x[2]))^2+ (521-1/(x[1]+13*x[2]))^2+ (843-1/(x[1]+14*x[2]))^2+ (1364-1/(x[1]+15*x[2]))^2+ (2207-1/(x[1]+16*x[2]))^2+ (3571-1/(x[1]+17*x[2]))^2+ (5778-1/(x[1]+18*x[2]))^2+ (9529-1/(x[1]+19*x[2]))^2+ (15307-1/(x[1]+20*x[2]))^2+ (24836-1/(x[1]+21*x[2]))^2)+x[3] == 0.0)


# ----- Objective ----- #
@objective(m, Min, x[3])
m = m 		 # model get returned when including this script. 

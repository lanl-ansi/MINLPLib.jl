using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
b_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
@variable(m, b[b_Idx])
x_Idx = Any[25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54]
@variable(m, x[x_Idx])
setlowerbound(x[38], 0.0)
setlowerbound(x[42], 0.0)
setcategory(b[15], :Bin)
setcategory(b[23], :Bin)
setcategory(b[21], :Bin)
setlowerbound(x[43], 0.0)
setcategory(b[22], :Bin)
setlowerbound(x[36], 0.0)
setlowerbound(x[54], 0.0)
setlowerbound(x[32], 0.0)
setlowerbound(x[27], 0.0)
setlowerbound(x[25], 0.0)
setlowerbound(x[30], 0.0)
setcategory(b[8], :Bin)
setlowerbound(x[29], 0.0)
setlowerbound(x[53], 0.0)
setlowerbound(x[37], 0.0)
setlowerbound(x[41], 0.0)
setcategory(b[5], :Bin)
setcategory(b[16], :Bin)
setlowerbound(x[52], 0.0)
setlowerbound(x[49], 0.0)
setcategory(b[13], :Bin)
setcategory(b[12], :Bin)
setcategory(b[2], :Bin)
setlowerbound(x[26], 0.0)
setcategory(b[14], :Bin)
setlowerbound(x[45], 0.0)
setcategory(b[20], :Bin)
setcategory(b[11], :Bin)
setcategory(b[19], :Bin)
setcategory(b[7], :Bin)
setcategory(b[9], :Bin)
setlowerbound(x[40], 0.0)
setcategory(b[3], :Bin)
setlowerbound(x[44], 0.0)
setlowerbound(x[50], 0.0)
setlowerbound(x[31], 0.0)
setlowerbound(x[33], 0.0)
setlowerbound(x[47], 0.0)
setcategory(b[17], :Bin)
setcategory(b[4], :Bin)
setcategory(b[6], :Bin)
setlowerbound(x[28], 0.0)
setlowerbound(x[35], 0.0)
setcategory(b[1], :Bin)
setcategory(b[18], :Bin)
setlowerbound(x[34], 0.0)
setlowerbound(x[46], 0.0)
setlowerbound(x[51], 0.0)
setlowerbound(x[48], 0.0)
setcategory(b[24], :Bin)
setlowerbound(x[39], 0.0)
setcategory(b[10], :Bin)


# ----- Constraints ----- #
@constraint(m, e1, - (8-x[49])^2-100*b[1]+x[25] >= -100.0)
@constraint(m, e2, - (8-x[50])^2-100*b[2]+x[26] >= -100.0)
@constraint(m, e3, - (8-x[51])^2-100*b[3]+x[27] >= -100.0)
@constraint(m, e4, - (8.5-x[49])^2-100*b[4]+x[28] >= -100.0)
@constraint(m, e5, - (8.5-x[50])^2-100*b[5]+x[29] >= -100.0)
@constraint(m, e6, - (8.5-x[51])^2-100*b[6]+x[30] >= -100.0)
@constraint(m, e7, - (8.3-x[49])^2-100*b[7]+x[31] >= -100.0)
@constraint(m, e8, - (8.3-x[50])^2-100*b[8]+x[32] >= -100.0)
@constraint(m, e9, - (8.3-x[51])^2-100*b[9]+x[33] >= -100.0)
@constraint(m, e10, - (8.7-x[49])^2-100*b[10]+x[34] >= -100.0)
@constraint(m, e11, - (8.7-x[50])^2-100*b[11]+x[35] >= -100.0)
@constraint(m, e12, - (8.7-x[51])^2-100*b[12]+x[36] >= -100.0)
@constraint(m, e13, - (8.6-x[49])^2-100*b[13]+x[37] >= -100.0)
@constraint(m, e14, - (8.6-x[50])^2-100*b[14]+x[38] >= -100.0)
@constraint(m, e15, - (8.6-x[51])^2-100*b[15]+x[39] >= -100.0)
@constraint(m, e16, - (9-x[49])^2-100*b[16]+x[40] >= -100.0)
@constraint(m, e17, - (9-x[50])^2-100*b[17]+x[41] >= -100.0)
@constraint(m, e18, - (9-x[51])^2-100*b[18]+x[42] >= -100.0)
@constraint(m, e19, - (9.2-x[49])^2-100*b[19]+x[43] >= -100.0)
@constraint(m, e20, - (9.2-x[50])^2-100*b[20]+x[44] >= -100.0)
@constraint(m, e21, - (9.2-x[51])^2-100*b[21]+x[45] >= -100.0)
@constraint(m, e22, - (9.5-x[49])^2-100*b[22]+x[46] >= -100.0)
@constraint(m, e23, - (9.5-x[50])^2-100*b[23]+x[47] >= -100.0)
@constraint(m, e24, - (9.5-x[51])^2-100*b[24]+x[48] >= -100.0)
@constraint(m, e25, b[1]+b[2]+b[3] >= 1.0)
@constraint(m, e26, b[4]+b[5]+b[6] >= 1.0)
@constraint(m, e27, b[7]+b[8]+b[9] >= 1.0)
@constraint(m, e28, b[10]+b[11]+b[12] >= 1.0)
@constraint(m, e29, b[13]+b[14]+b[15] >= 1.0)
@constraint(m, e30, b[16]+b[17]+b[18] >= 1.0)
@constraint(m, e31, b[19]+b[20]+b[21] >= 1.0)
@constraint(m, e32, b[22]+b[23]+b[24] >= 1.0)
@constraint(m, e33, -b[1]-b[4]-b[7]-b[10]-b[13]-b[16]-b[19]-b[22]+x[52] == 0.0)
@constraint(m, e34, -b[2]-b[5]-b[8]-b[11]-b[14]-b[17]-b[20]-b[23]+x[53] == 0.0)
@constraint(m, e35, -b[3]-b[6]-b[9]-b[12]-b[15]-b[18]-b[21]-b[24]+x[54] == 0.0)
@constraint(m, e36, x[52]*x[49]-8*b[1]-8.5*b[4]-8.3*b[7]-8.7*b[10]-8.6*b[13]-9*b[16]-9.2*b[19]-9.5*b[22] == 0.0)
@constraint(m, e37, x[53]*x[50]-8*b[2]-8.5*b[5]-8.3*b[8]-8.7*b[11]-8.6*b[14]-9*b[17]-9.2*b[20]-9.5*b[23] == 0.0)
@constraint(m, e38, x[54]*x[51]-8*b[3]-8.5*b[6]-8.3*b[9]-8.7*b[12]-8.6*b[15]-9*b[18]-9.2*b[21]-9.5*b[24] == 0.0)
@NLconstraint(m, e39, -x[25]-x[26]-x[27]-x[28]-x[29]-x[30]-x[31]-x[32]-x[33]-x[34]-x[35]-x[36]-x[37]-x[38]-x[39]-x[40]-x[41]-x[42]-x[43]-x[44]-x[45]-x[46]-x[47]-x[48]+objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m

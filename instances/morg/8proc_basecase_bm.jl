using JuMP

m = Model()

# ----- Variables ----- #
x_Idx = Any[1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]
@variable(m, x[x_Idx])
b_Idx = Any[2, 3, 4, 5, 6, 7, 8, 9]
@variable(m, b[b_Idx])
setlowerbound(x[36], 0.0)
setlowerbound(x[16], 0.0)
setlowerbound(x[32], 0.0)
setlowerbound(x[27], 0.0)
setlowerbound(x[14], 0.0)
setcategory(b[2], :Bin)
setlowerbound(x[17], 0.0)
setlowerbound(x[25], 0.0)
setlowerbound(x[38], 0.0)
setlowerbound(x[30], 0.0)
setlowerbound(x[26], 0.0)
setlowerbound(x[23], 0.0)
setcategory(b[8], :Bin)
setlowerbound(x[42], 0.0)
setlowerbound(x[34], 0.0)
setlowerbound(x[11], 0.0)
setlowerbound(x[29], 0.0)
setlowerbound(x[22], 0.0)
setlowerbound(x[12], 0.0)
setcategory(b[7], :Bin)
setcategory(b[9], :Bin)
setlowerbound(x[37], 0.0)
setlowerbound(x[19], 0.0)
setlowerbound(x[40], 0.0)
setcategory(b[3], :Bin)
setlowerbound(x[20], 0.0)
setlowerbound(x[24], 0.0)
setlowerbound(x[41], 0.0)
setlowerbound(x[39], 0.0)
setcategory(b[5], :Bin)
setlowerbound(x[31], 0.0)
setlowerbound(x[18], 0.0)
setlowerbound(x[15], 0.0)
setlowerbound(x[33], 0.0)
setlowerbound(x[13], 0.0)
setcategory(b[4], :Bin)
setcategory(b[6], :Bin)
setlowerbound(x[21], 0.0)
setlowerbound(x[28], 0.0)
setlowerbound(x[35], 0.0)
setlowerbound(x[10], 0.0)
setupperbound(x[12], 2.0)
setupperbound(x[14], 2.0)
setupperbound(x[18], 2.0)
setupperbound(x[19], 1.0)
setupperbound(x[23], 1.0)
setupperbound(x[26], 2.0)
setupperbound(x[28], 2.0)
setupperbound(x[30], 2.0)
setupperbound(x[34], 3.0)


# ----- Constraints ----- #
@constraint(m, e1, x[22]-x[28]-x[30] == 0.0)
@constraint(m, e2, -x[18]-x[25]+x[26]-x[34] == 0.0)
@constraint(m, e3, x[20]-x[21]-x[24] == 0.0)
@constraint(m, e4, x[12]+x[14]-x[15]-x[20] == 0.0)
@constraint(m, e5, x[15]-x[16]-x[17] == 0.0)
@constraint(m, e6, -x[29]-x[31]+x[32] == 0.0)
@constraint(m, e7, -x[23]+x[32]-x[33] == 0.0)
@constraint(m, e8, x[10]-x[11]-x[13] == 0.0)
@constraint(m, e9, x[19]-0.8*x[26] <= 0.0)
@constraint(m, e10, x[19]-0.4*x[26] >= 0.0)
@constraint(m, e11, x[21]-5*x[23] <= 0.0)
@constraint(m, e12, x[21]-2*x[23] >= 0.0)
@NLconstraint(m, e13, exp(x[12])-x[11] <= 1.0)
@constraint(m, e14, x[11] == 0.0)
@constraint(m, e15, x[12] == 0.0)
@constraint(m, e16, x[35] == 5.0)
@NLconstraint(m, e17, exp(0.833333333333333*x[14])-x[13] <= 1.0)
@constraint(m, e18, x[13] == 0.0)
@constraint(m, e19, x[14] == 0.0)
@constraint(m, e20, x[36] == 8.0)
@constraint(m, e21, -x[17]+1.5*x[18]+x[19] == 0.0)
@constraint(m, e22, x[18] == 0.0)
@constraint(m, e23, x[37] == 6.0)
@constraint(m, e24, 1.25*x[21]-x[22]+1.25*x[23] == 0.0)
@constraint(m, e25, x[21] == 0.0)
@constraint(m, e26, x[22] == 0.0)
@constraint(m, e27, x[23] == 0.0)
@constraint(m, e28, x[38] == 10.0)
@constraint(m, e29, x[24]-2*x[25] == 0.0)
@constraint(m, e30, x[24] == 0.0)
@constraint(m, e31, x[25] == 0.0)
@constraint(m, e32, x[39] == 6.0)
@NLconstraint(m, e33, exp(0.666666666666667*x[29])-x[28] <= 1.0)
@constraint(m, e34, x[28] == 0.0)
@constraint(m, e35, x[29] == 0.0)
@constraint(m, e36, x[40] == 7.0)
@NLconstraint(m, e37, exp(x[31])-x[30] <= 1.0)
@constraint(m, e38, x[30] == 0.0)
@constraint(m, e39, x[31] == 0.0)
@constraint(m, e40, x[41] == 4.0)
@NLconstraint(m, e41, exp(x[27])-x[19]-x[26] <= 1.0)
@constraint(m, e42, x[19] == 0.0)
@constraint(m, e43, x[26] == 0.0)
@constraint(m, e44, x[27] == 0.0)
@constraint(m, e45, x[34] == 0.0)
@constraint(m, e46, x[42] == 5.0)
@constraint(m, e47, x[1]-x[11]+10*x[12]-x[13]+15*x[14]+40*x[18]-15*x[19]-15*x[23]-80*x[26]+65*x[27]-25*x[28]+60*x[29]-35*x[30]+80*x[31]+35*x[34]-x[35]-x[36]-x[37]-x[38]-x[39]-x[40]-x[41]-x[42] == 122.0)
@constraint(m, e48, b[2]+b[3] <= 1.0)
@constraint(m, e49, b[5]+b[6] <= 1.0)
@constraint(m, e50, b[7]+b[8] <= 1.0)
@constraint(m, e51, -b[2]+b[4]+b[5]+b[6] >= 0.0)
@constraint(m, e52, -b[3]+b[4]+b[5]+b[6] >= 0.0)
@constraint(m, e53, -b[4]+b[9] >= 0.0)
@constraint(m, e54, b[2]+b[3]-b[4] >= 0.0)
@constraint(m, e55, b[2]+b[3]-b[5] >= 0.0)
@constraint(m, e56, -b[5]+b[7]+b[8] >= 0.0)
@constraint(m, e57, b[2]+b[3]-b[6] >= 0.0)
@constraint(m, e58, -b[6]+b[9] >= 0.0)
@constraint(m, e59, b[5]-b[7] >= 0.0)
@constraint(m, e60, b[5]-b[8] >= 0.0)


# ----- Objective ----- #
@objective(m, Min, x[1])

m = m 		 # model get returned when including this script. 

using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
@variable(m, x[x_Idx])
setlowerbound(x[21], 0.0)
setlowerbound(x[1], -0.5)
setupperbound(x[1], 0.5)
setlowerbound(x[2], 5.4)
setupperbound(x[2], 6.4)
setlowerbound(x[3], 0.4)
setupperbound(x[3], 1.4)
setlowerbound(x[4], 4.9)
setupperbound(x[4], 5.9)
setlowerbound(x[5], 1.3)
setupperbound(x[5], 2.3)
setlowerbound(x[6], 3.9)
setupperbound(x[6], 4.9)
setlowerbound(x[7], 2.1)
setupperbound(x[7], 3.1)
setlowerbound(x[8], 4.1)
setupperbound(x[8], 5.1)
setlowerbound(x[9], 2.8)
setupperbound(x[9], 3.8)
setlowerbound(x[10], 3.0)
setupperbound(x[10], 4.0)
setlowerbound(x[11], 3.9)
setupperbound(x[11], 4.9)
setlowerbound(x[12], 3.2)
setupperbound(x[12], 4.2)
setlowerbound(x[13], 4.7)
setupperbound(x[13], 5.7)
setlowerbound(x[14], 2.3)
setupperbound(x[14], 3.3)
setlowerbound(x[15], 5.6)
setupperbound(x[15], 6.6)
setlowerbound(x[16], 2.3)
setupperbound(x[16], 3.3)
setlowerbound(x[17], 6.0)
setupperbound(x[17], 7.0)
setlowerbound(x[18], 1.9)
setupperbound(x[18], 2.9)
setlowerbound(x[19], 6.9)
setupperbound(x[19], 7.9)
setlowerbound(x[20], 1.0)
setupperbound(x[20], 2.0)
setupperbound(x[21], 10.0)
setlowerbound(x[22], -2.0)
setupperbound(x[22], 2.0)
setlowerbound(x[23], -2.0)
setupperbound(x[23], 2.0)
setlowerbound(x[24], -2.0)
setupperbound(x[24], 2.0)


# ----- Constraints ----- #
@NLconstraint(m, e1, -( (x[1])^2+ (x[2]-5.9)^2+ (x[3]-0.9)^2+ (x[4]-5.4)^2+ (x[5]-1.8)^2+ (x[6]-4.4)^2+ (x[7]-2.6)^2+ (x[8]-4.6)^2+ (x[9]-3.3)^2+ (x[10]-3.5)^2+ (x[11]-4.4)^2+ (x[12]-3.7)^2+ (x[13]-5.2)^2+ (x[14]-2.8)^2+ (x[15]-6.1)^2+ (x[16]-2.8)^2+ (x[17]-6.5)^2+ (x[18]-2.4)^2+ (x[19]-7.4)^2+ (x[20]-1.5)^2)+objvar == 0.0)
@NLconstraint(m, e2, x[22]*x[1]+x[23]* (x[1])^2+x[24]* (x[1])^3-x[2]+x[21] == 0.0)
@NLconstraint(m, e3, x[22]*x[3]+x[23]* (x[3])^2+x[24]* (x[3])^3-x[4]+x[21] == 0.0)
@NLconstraint(m, e4, x[22]*x[5]+x[23]* (x[5])^2+x[24]* (x[5])^3-x[6]+x[21] == 0.0)
@NLconstraint(m, e5, x[22]*x[7]+x[23]* (x[7])^2+x[24]* (x[7])^3-x[8]+x[21] == 0.0)
@NLconstraint(m, e6, x[22]*x[9]+x[23]* (x[9])^2+x[24]* (x[9])^3-x[10]+x[21] == 0.0)
@NLconstraint(m, e7, x[22]*x[11]+x[23]* (x[11])^2+x[24]* (x[11])^3-x[12]+x[21] == 0.0)
@NLconstraint(m, e8, x[22]*x[13]+x[23]* (x[13])^2+x[24]* (x[13])^3-x[14]+x[21] == 0.0)
@NLconstraint(m, e9, x[22]*x[15]+x[23]* (x[15])^2+x[24]* (x[15])^3-x[16]+x[21] == 0.0)
@NLconstraint(m, e10, x[22]*x[17]+x[23]* (x[17])^2+x[24]* (x[17])^3-x[18]+x[21] == 0.0)
@NLconstraint(m, e11, x[22]*x[19]+x[23]* (x[19])^2+x[24]* (x[19])^3-x[20]+x[21] == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script. 

using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 5]
@variable(m, x[x_Idx])
setlowerbound(x[5], 0.0)
setlowerbound(x[1], 1.0e-6)
setupperbound(x[1], 1.0)
setlowerbound(x[2], 1.0e-6)
setupperbound(x[2], 1.0)
setlowerbound(x[3], 60.0)
setupperbound(x[3], 100.0)


# ----- Constraints ----- #
@constraint(m, e1, objvar-x[5] == 0.0)
@NLconstraint(m, e2, 0.361872516756437*x[2]/(x[1]+0.888649896608059*x[2])+0.868134622480909*x[2]/(0.696880695582072*x[1]+x[2])-(0.361872516756437*x[1]*x[2]/ (x[1]+0.888649896608059*x[2])^2+0.604986259573375*x[2]*x[1]/ (0.696880695582072*x[1]+x[2])^2)-2755.64173589155/(219.161+x[3])-x[5] <= -9.20816767045657)
@NLconstraint(m, e3, 0.868134622480909*x[1]/(0.696880695582072*x[1]+x[2])+0.361872516756437*x[1]/(x[1]+0.888649896608059*x[2])-(0.321577974600906*x[1]*x[2]/ (x[1]+0.888649896608059*x[2])^2+0.868134622480909*x[2]*x[1]/ (0.696880695582072*x[1]+x[2])^2)-4117.06819797521/(227.438+x[3])-x[5] <= -12.6599269316621)
@NLconstraint(m, e4, (-0.361872516756437*x[2]/(x[1]+0.888649896608059*x[2]))-0.868134622480909*x[2]/(0.696880695582072*x[1]+x[2])+0.361872516756437*x[1]*x[2]/ (x[1]+0.888649896608059*x[2])^2+0.604986259573375*x[2]*x[1]/ (0.696880695582072*x[1]+x[2])^2+2755.64173589155/(219.161+x[3])-x[5] <= 9.20816767045657)
@NLconstraint(m, e5, (-0.868134622480909*x[1]/(0.696880695582072*x[1]+x[2]))-0.361872516756437*x[1]/(x[1]+0.888649896608059*x[2])+0.321577974600906*x[1]*x[2]/ (x[1]+0.888649896608059*x[2])^2+0.868134622480909*x[2]*x[1]/ (0.696880695582072*x[1]+x[2])^2+4117.06819797521/(227.438+x[3])-x[5] <= 12.6599269316621)
@constraint(m, e6, x[1]+x[2] == 1.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script. 
